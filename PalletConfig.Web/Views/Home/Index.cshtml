@model PalletConfigViewModel

@{

    ViewData["Title"] = "Home Page";
}



<div class="container">
    <div class="col-md-5">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <!--Hidden Start-->
            @Html.HiddenFor(m => m.EventCommand)
            <!--Hidden End-->

            <div class="row form-border">
                <!-- Pallet parameters -->
                <div class="form-group">
                    <label>Input pallet size:</label>
                    <div class="row">
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.PalletSizeX, "{0:#.#}", new { placeholder = "Width (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.PalletSizeX, "", new { @class = "bg-danger text-danger" })
                        </div>
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.PalletSizeY, "{0:#.#}", new { placeholder = "Height (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.PalletSizeY)
                        </div>
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.PalletSizeZ, "{0:#.#}", new { placeholder = "Depth (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.PalletSizeZ)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-border">
                <!-- Box parameters -->
                <div class="form-group">
                    <label>Input box parameters:</label>
                    <div class="row">
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.BoxSizeX, "{0:#.#}", new { placeholder = "Width (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.BoxSizeX, "", new { @class = "bg-danger text-danger" })
                        </div>
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.BoxSizeY, "{0:#.#}", new { placeholder = "Height (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.BoxSizeY)
                        </div>
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.BoxSizeZ, "{0:#.#}", new { placeholder = "Depth (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.BoxSizeZ)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                            <label>Box weight:</label>
                        </div>
                        <div class="col-xs-4">
                            @Html.TextBoxFor(m => m.PalletData.BoxWeight, "{0:#.#}", new { placeholder = "Mass (kg)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.BoxWeight)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-border">
                <!-- Stacking requirements -->
                <div class="form-group">
                    <label>Max height:</label>
                    <div class="row">
                        <div class="col-xs-6">
                            @Html.TextBoxFor(m => m.PalletData.PalletHeight, "{0:#.#}", new { placeholder = "Pallet height (cm)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.PalletHeight)
                        </div>
                    </div>
                    <label>Max weight:</label>
                    <div class="row">
                        <div class="col-xs-6">
                            @Html.TextBoxFor(m => m.PalletData.PalletWeight, "{0:#.#}", new { placeholder = "Pallet weight (kg)", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.PalletData.PalletWeight, "", new { @class = "bg-danger text-danger" })
                        </div>
                    </div>
                    <p></p>
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="checkbox-inline">
                                @Html.CheckBoxFor(m => m.PalletData.StackOpposite, new { @class = "checkbox", @id = "stackOpposite" }) Stack layers on opposite side
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-border">
                <!-- Best option calculation -->
                <div class="form-group text-right">
                    <button class="btn btn-primary mb-2" id="confirmBtn" data-pdsa-action="confirm">Confirm</button>
                    <button class="btn btn-danger mb-2" id="resetBtn" data-pdsa-action="reset">Reset</button>
                </div>
            </div>
        }
    </div>
    <div class="col-md-7">
        <div class="row form-border">
            <!-- Display graphical presentation of pallet-->
            <label>Pallet view:</label>
            <div>
                <div class="" id="canvas" width="400" height="300"></div>
            </div>
        </div>
        <div class="row form-border">
            <!-- Best option calculation -->
            <div class="form-group">
                <label for="chooseStackingOption">Select stacking option</label>
                <select multiple class="form-control" id="chooseStackingOption" onchange="onSelectChange()">
                    @try
                    {
                        var i = 0;
                        @foreach (var option in Model.Configurations)
                        {
                            <option value="@i" id="@option.OptionName">@option.OptionName: Boxes: @option.NumberOfBoxes, Total weight: @(option.TotalWeight)kg, Total height: @(option.TotalHeight)cm, Volume: @option.Volume.ToString("#0.00%")</option>
                            i++;
                        }
                    }
                    catch
                    {
                        <option>Nothing loaded yet...</option>
                    }
                </select>
            </div>
            <div class="form-group text-right">
                <button type="submit" class="btn btn-primary mb-2" id="confirmBtnGet" value="Confirm">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/js/three.min.js"></script>
    <script src="~/js/OrbitControls.js"></script>
    <script src="~/js/canvas.js"></script>
    <script src="~/js/actionManagement.js"></script>
}